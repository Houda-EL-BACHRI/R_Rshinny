setwd("C:/Users/El BaChRi/Desktop/ML_Random_Forest_Shinny")
library(RCurl)
library(randomForest)
library(lattice)
library(ggplot2)
library(caret)
data(iris)
TrainingIndex <- createDataPartition(iris$Species, p=0.8, list=FALSE)
TrainingSet <- iris[TrainingIndex,]
TestingSet <- iris[-TrainingIndex,]
write.csv(TrainingSet, "Train.csv")
write.csv(TestingSet, "Test.csv")
Trainset <- read.csv("Train.csv", header = TRUE)
Trainset <- Trainset[,-1]
Trainset$Species <- as.factor(Trainset$Species)
model <- randomForest(Species ~ .,data = Trainset, ntree =500,mtry =4, importance=TRUE)
saveRDS(model, "model.rds")
setwd("C:/Users/El BaChRi/Desktop/ML_Random_Forest_Shinny")
library(RCurl)
library(randomForest)
library(lattice)
library(ggplot2)
library(caret)
# Charger les données
data(iris)
# Définir une graine pour rendre le hasard reproductible
set.seed(42)
# Échantillonner au hasard 100 des 150 index de lignes
indexes <- sample(
x = 1:150,
size = 100)
# Inspecter les index aléatoires
print(indexes)
# Créer un ensemble de formation à partir d'index
train <- iris[indexes, ]
# Créer un ensemble de test à partir des index restants
test <- iris[-indexes, ]
write.csv(train, "Train.csv")
write.csv(test, "Test.csv")
Trainset <- read.csv("Train.csv", header = TRUE)
Trainset <- Trainset[,-1]
Trainset$Species <- as.factor(Trainset$Species)
model <- randomForest(Species ~ .,data = Trainset, ntree =500,mtry =4, importance=TRUE)
saveRDS(model, "model.rds")
library(shiny)
library(data.table)
library(randomForest)
model <- readRDS("C:/Users/El BaChRi/Desktop/ML_Random_Forest_Shinny/model.rds")
ui <- pageWithSidebar(
headerPanel("Iris Predictor"),
sidebarPanel(
HTML("<h3>Please enter your dimensions:</h3>"),
numericInput("sl", label = "Sepal Length", value = 5.1),
numericInput("sw", label = "Sepal Width", value = 3.6),
numericInput("pl", label = "Petal Length", value = 4.0),
numericInput("pw", label = "Petal Width", value = 4.5),
actionButton("submitbutton", "Submit",
class = "btn btn-primary")
),
mainPanel(
tags$label(h3('Status/output')),
verbatimTextOutput('contents'),
tableOutput('tabledata')
)
)
server <- function(input, output, session){
datasetinput <- reactive({
df <- data.frame(
Name = c("Sepal Length",
"Sepal Width",
"Petal Length",
"Petal Width"),
value = as.character(c("input$sl",
"input$sw",
"input$pl",
"input$pw")),
stringsAsFactors = FALSE)
Species <- 0
df <- rbind(df, Species)
input <- transpose(df)
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
print(Output)
})
output$contents <- renderPrint({
if(input$submitbutton>0){
print("Calculation Completed")
}else{
print("Calculation in progress")
}
})
output$tabledata <- renderTable({
if(input$submitbutton>0){
datasetinput()
}
})
}
shinyApp(ui = ui, server = server)
runApp('app-numeric.R')
runApp('app-numeric.R')
library(shiny)
library(data.table)
library(randomForest)
model <- readRDS("C:/Users/El BaChRi/Desktop/ML_Random_Forest_Shinny/model.rds")
ui <- pageWithSidebar(
headerPanel("Iris Predictor"),
sidebarPanel(
HTML("<h3>Please enter your dimensions:</h3>"),
numericInput("sl", label = "Sepal Length", value = 5.1),
numericInput("sw", label = "Sepal Width", value = 3.6),
numericInput("pl", label = "Petal Length", value = 4.0),
numericInput("pw", label = "Petal Width", value = 4.5),
actionButton("submitbutton", "Submit",
class = "btn btn-primary")
),
mainPanel(
tags$label(h3('Status/output')),
verbatimTextOutput('contents'),
tableOutput('tabledata')
)
)
server <- function(input, output, session){
datasetinput <- reactive({
df <- data.frame(
Name = c("Sepal Length",
"Sepal Width",
"Petal Length",
"Petal Width"),
value = as.character(c("input$sl",
"input$sw",
"input$pl",
"input$pw")),
stringsAsFactors = FALSE)
Species <- 0
df <- rbind(df, Species)
input <- transpose(df)
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
print(Output)
})
output$contents <- renderPrint({
if(input$submitbutton>0){
print("Calculation Completed")
}else{
print("Calculation in progress")
}
})
output$tabledata <- renderTable({
if(input$submitbutton>0){
datasetinput()
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(data.table)
library(randomForest)
model <- readRDS("C:/Users/El BaChRi/Desktop/ML_Random_Forest_Shinny/model.rds")
ui <- pageWithSidebar(
headerPanel("Iris Predictor"),
sidebarPanel(
HTML("<h3>Please enter your dimensions \n:</h3>"),
numericInput("sl", label = "Sepal Length", value = 5.1),
numericInput("sw", label = "Sepal Width", value = 3.6),
numericInput("pl", label = "Petal Length", value = 4.0),
numericInput("pw", label = "Petal Width", value = 4.5),
actionButton("submitbutton", "Submit",
class = "btn btn-primary")
),
mainPanel(
tags$label(h3('Status/output')),
verbatimTextOutput('contents'),
tableOutput('tabledata')
)
)
server <- function(input, output, session){
datasetinput <- reactive({
df <- data.frame(
Name = c("Sepal Length",
"Sepal Width",
"Petal Length",
"Petal Width"),
value = as.character(c("input$sl",
"input$sw",
"input$pl",
"input$pw")),
stringsAsFactors = FALSE)
Species <- 0
df <- rbind(df, Species)
input <- transpose(df)
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
print(Output)
})
output$contents <- renderPrint({
if(input$submitbutton>0){
print("Calculation Completed")
}else{
print("Calculation in progress")
}
})
output$tabledata <- renderTable({
if(input$submitbutton>0){
datasetinput()
}
})
}
shinyApp(ui = ui, server = server)
